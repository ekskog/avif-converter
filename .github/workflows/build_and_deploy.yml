name: Build and Deploy AVIF Converter

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "IMAGE_NAME=ghcr.io/ekskog/avif-converter" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.EK_GITHUB_PAT }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          echo "Building and pushing: $IMAGE_TAG"
          docker buildx build \
            --platform linux/amd64 \
            --tag $IMAGE_TAG \
            --push \
            --progress=plain \
            .

      - name: Verify Image Push
        run: |
          IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          echo "Verifying image exists: $IMAGE_TAG"
          docker manifest inspect $IMAGE_TAG

      - name: Set Up KUBECONFIG
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig.yaml
          echo "KUBECONFIG=$PWD/kubeconfig.yaml" >> $GITHUB_ENV
          echo "KUBECONFIG set to $PWD/kubeconfig.yaml"
          echo "Kubeconfig file size: $(wc -c < kubeconfig.yaml) bytes"
          if [ ! -s kubeconfig.yaml ]; then
            echo "ERROR: kubeconfig.yaml is empty!"
            exit 1
          fi

      - name: Deploy to Kubernetes
        run: |
          IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          echo "ðŸš€ Deploying NEW image: $IMAGE_TAG"

          # Update the deployment YAML with the current image tag
          sed -i "s|image: ghcr.io/ekskog/avif-converter:.*|image: $IMAGE_TAG|g" k8s/deployment.yaml

          # Apply the updated deployment YAML to ensure all changes (including replicas) are applied
          kubectl apply -f k8s/deployment.yaml --kubeconfig=kubeconfig.yaml --namespace=photovault
          kubectl apply -f k8s/service.yaml --kubeconfig=kubeconfig.yaml --namespace=photovault
